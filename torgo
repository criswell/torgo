#!/usr/bin/env python

import os
import sys
import errno
import configparser
import argparse
from hashlib import blake2b
from pathlib import Path
from colorama import init, Fore, Style
from tinydb import TinyDB, Query


def init_config():
    """ Initializes the config (will wipe-out anything there)"""
    init()

    print(Style.RESET_ALL + Style.BRIGHT +
          "TORGO CONFIGURATION INITIALIZATION\n")
    print(Style.RESET_ALL +
          "Please enter your desired configuration settings,")
    print("defaults are in hard brackets\n")

    print(Style.BRIGHT + Fore.GREEN + "Torgo Org Directory:")
    org_dir = "{0}/.torgo".format(str(Path.home()))
    user_org = input(Style.RESET_ALL +
                     "[" + Style.DIM + org_dir + Style.RESET_ALL + "] ")
    if user_org == '':
        user_org = org_dir

    print("\n" + Style.BRIGHT + Fore.GREEN +
          "The editor to use, blank to use $EDITOR from environment:")
    editor = input(Style.RESET_ALL + "[] ")

    print("\n" + Style.BRIGHT + Fore.GREEN +
          "The extension to use for the Org files:")
    ext = input(Style.RESET_ALL + "[" + Style.DIM + "org" + Style.RESET_ALL +
                "] ")

    if ext == '':
        ext = "org"

    cfg['TORGO'] = {}
    cfg['TORGO']['org_dir'] = user_org
    cfg['TORGO']['editor'] = editor
    cfg['TORGO']['ext'] = ext
    with open(torgo_cfg, 'w') as f:
        cfg.write(f)


def get_hash(p):
    """ Given a path object, get a hash for it. """
    h = blake2b()
    h.update(str(p).encode('utf-8'))
    return h.hexdigest()


def mkdir_p(path):
    """ Equivalent of mkdir -p """
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass


def find_org(path):
    """ Given a path, attempt to find an org file already created for
    the path or its parents. Return the hash associated with the org file.
    If no parents have an org file, or if the '-t' arg is passed, then
    we just return the hash associated original path. """
    orig_path = path.resolve()
    org_hash = get_hash(orig_path)
    h = org_hash
    q = Query()

    while not args.this:
        r = db.search(q.hash == h)
        if len(r) > 0:
            return h, path
        else:
            lp = path
            path = path.parent
            if path == lp:
                break
            h = get_hash(path)

    return org_hash, orig_path


parser = argparse.ArgumentParser(description="Org-file anywhere, managed")
parser.add_argument(
        "-t", "--this",
        help="Use 'this' directory, don't attempt to find org file in parents",
        action="store_true")
parser.add_argument(
        "-i", "--init",
        help="Force a re-init of the configuration", action="store_true")
parser.add_argument(
        "-p", "--prune",
        help="Prune the current org file (delete it)", action="store_true")
args = parser.parse_args()

# Attempt to load the configuration
torgo_cfg = '{0}/.torgo.cfg'.format(str(Path.home()))
if 'TORGO_CFG' in os.environ:
    torgo_cfg = os.environ['TORGO_CFG']

cfg = configparser.ConfigParser()
must_init = False

if os.path.isfile(torgo_cfg):
    cfg.read(torgo_cfg)
else:
    must_init = True

if must_init or args.init:
    init_config()

editor = cfg['TORGO']['editor']
if editor == '':
    if 'EDITOR' in os.environ:
        editor = os.environ['EDITOR']
    else:
        print(Style.RESET_ALL + Style.BRIGHT + Fore.RED +
              "ERROR, NO EDITOR FOUND!" + Style.RESET_ALL)
        print("\nPlease set your editor either in the config " +
              "file '{0}' or".format(torgo_cfg))
        print("in the environment variable $EDITOR.")
        print("\nYou can re-run torgo with '-i' to force re-initialization")
        sys.exit(1)

mkdir_p(cfg['TORGO']['org_dir'])

db = TinyDB('{0}/org_lookup_db.json'.format(cfg['TORGO']['org_dir']))

org, path = find_org(Path.cwd())

qh = Query()
lookup = db.search(qh.hash == org)
if len(lookup) == 0:
    lookup = {
            'hash': org,
            'path': str(path),
            'org_file': '{0}.{1}'.format(org, cfg['TORGO']['ext'])
            }
    db.insert(lookup)
else:
    lookup = lookup[0]  # We only care about first

org_file = Path(cfg['TORGO']['org_dir'])
org_file = org_file / lookup['org_file']

if args.prune:
    os.remove(org_file)
    db.remove(qh.hash == org)
    print("Pruned this org file")
else:
    sys.exit(os.system('{0} {1}'.format(editor, str(org_file))))
